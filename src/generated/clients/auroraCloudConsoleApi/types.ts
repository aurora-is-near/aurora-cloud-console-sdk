/* eslint-disable */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/deals": {
    /**
     * Get all deals
     * @description **Required scopes:** `deals:read`
     */
    get: operations["getDeals"];
    /**
     * Create a deal
     * @description **Required scopes:** `deals:write`
     */
    post: operations["createDeal"];
  };
  "/api/deals/{id}": {
    /**
     * Get a single deal
     * @description **Required scopes:** `deals:read`
     */
    get: operations["getDeal"];
    /**
     * Update a deal
     * @description **Required scopes:** `deals:write`
     */
    put: operations["updateDeal"];
  };
  "/api/deals/{id}/rules": {
    /**
     * Get all rules for a deal
     * @description **Required scopes:** `deals:read`
     */
    get: operations["getRules"];
    /**
     * Create a rule for a deal
     * @description **Required scopes:** `deals:write`
     */
    post: operations["createRule"];
  };
  "/api/deals/{id}/rules/{rule_id}": {
    /**
     * Update a rule for a deal
     * @description **Required scopes:** `deals:write`
     */
    put: operations["updateRule"];
  };
  "/api/silos": {
    /**
     * Get all silos
     * @description **Required scopes:** `silos:read`
     */
    get: operations["getSilos"];
  };
  "/api/silos/{id}": {
    /**
     * Get a single silo
     * @description **Required scopes:** `silos:read`
     */
    get: operations["getSilo"];
  };
  "/api/silos/{id}/tokens": {
    /**
     * Get the bridged tokens associated with a silo
     * @description **Required scopes:** `silos:read`
     */
    get: operations["getSiloBridgedTokens"];
  };
  "/api/silos/{id}/tokens/requests": {
    /**
     * Get the bridged tokens requested for a silo
     * @description **Required scopes:** `silos:read`
     */
    get: operations["getSiloBridgedTokenRequests"];
  };
  "/api/silos/{id}/tokens/bridge": {
    /**
     * Request bridging of a token for a silo
     * @description **Required scopes:** `silos:write`
     */
    post: operations["bridgeSiloToken"];
  };
  "/api/silos/{id}/oracle": {
    /**
     * Get the oracle configuration for a silo
     * @description **Required scopes:** `silos:read`
     */
    get: operations["getSiloOracle"];
    /**
     * Create an oracle configuration for a silo
     * @description **Required scopes:** `silos:write`
     */
    post: operations["createSiloOracle"];
  };
  "/api/silos/{id}/widget": {
    /**
     * Get the widget configuration for a silo
     * @description **Required scopes:** `silos:read`
     */
    get: operations["getWidget"];
    /**
     * Update the widget configuration for a silo
     * @description **Required scopes:** `silos:write`
     */
    put: operations["updateWidget"];
  };
  "/api/silos/{id}/wallets": {
    /**
     * Get details of the wallets that have interacted with your silo
     * @description **Required scopes:** `transactions:read`
     */
    get: operations["getWallets"];
  };
  "/api/silos/{id}/wallets/{address}": {
    /**
     * Get details of a single wallet that has interacted with your silo
     * @description **Required scopes:** `transactions:read`
     */
    get: operations["getWallet"];
  };
  "/api/silos/{id}/assets": {
    /**
     * Upload an asset used in configuring the silo
     * @description **Required scopes:** `assets:write`
     */
    post: operations["uploadSiloAsset"];
  };
  "/api/silos/{id}/transactions": {
    /**
     * Get transaction chart data for a silo
     * @description **Required scopes:** `transactions:read`
     */
    get: operations["getSiloTransactions"];
  };
  "/api/silos/{id}/permissions": {
    /**
     * Enable disable whitelists to allow make transactions or deploy contracts publicly
     * @description **Required scopes:** `silo:write`
     */
    put: operations["toggleSiloPermissions"];
    /**
     * Add wallet address to whitelist to allow make transactions or deploy contracts
     * @description **Required scopes:** `silo:write`
     */
    post: operations["addAddressToPermissionsWhitelist"];
    /**
     * Remove wallet address from whitelist to forbid make transactions or deploy contracts
     * @description **Required scopes:** `silo:write`
     */
    delete: operations["removeAddressFromPermissionsWhitelist"];
  };
  "/api/silos/{id}/gas-collected": {
    /**
     * Get collected gas over time for a single silo
     * @description **Required scopes:** `transactions:read`
     */
    get: operations["getSiloCollectedGas"];
  };
  "/api/silos/{id}/gas-collected-total": {
    /**
     * Get collected gas to the moment
     * @description **Required scopes:** `transactions:read`
     */
    get: operations["getSiloCollectedGasTotal"];
  };
  "/api/silos/{id}/failure-rate": {
    /**
     * Get the failure rate chart for a single silo
     * @description **Required scopes:** `silos:read`
     */
    get: operations["getSiloFailureRate"];
  };
  "/api/silos/{id}/latency": {
    /**
     * Get latency chart data
     * @description **Required scopes:** `silos:read`
     */
    get: operations["getSiloLatency"];
  };
  "/api/silos/{id}/rpc-requests": {
    /**
     * Get RPC request chart data
     * @description **Required scopes:** `silos:read`
     */
    get: operations["getSiloRpcRequests"];
  };
  "/api/silos/{id}/forwarder/contract/{targetAddress}": {
    /**
     * Get the forwarder address for given target address
     * @description **Required scopes:** `forwarder:read`
     */
    get: operations["getForwarderAddress"];
  };
  "/api/silos/{id}/forwarder/contract": {
    /**
     * Create a forwarder address for given target address
     * @description **Required scopes:** `forwarder:write`
     */
    post: operations["createForwarderAddress"];
  };
  "/api/silos/{id}/forwarder/tokens": {
    /**
     * Get the tokens supported by the forwarder
     * @description **Required scopes:** `forwarder:read`
     */
    get: operations["getForwarderTokens"];
    /**
     * Update forwarder support for the given token(s)
     * @description **Required scopes:** `forwarder:write`
     */
    put: operations["updateForwarderTokens"];
    /**
     * Add forwarder support for the given token(s)
     * @description **Required scopes:** `forwarder:write`
     */
    post: operations["addForwarderTokens"];
    /**
     * Remove forwarder support for the given token(s)
     * @description **Required scopes:** `forwarder:write`
     */
    delete: operations["removeForwarderTokens"];
  };
  "/api/silos/{id}/healthcheck": {
    /**
     * Perform various checks on the silo and report the status
     * @description **Required scopes:** `silos:read`
     */
    get: operations["healthcheck"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all deals
   * @description **Required scopes:** `deals:read`
   */
  getDeals: {
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            items: ({
                id: number;
                createdAt: string;
                updatedAt: string | null;
                deletedAt: string | null;
                name: string;
                teamId: number;
                siloId: number | null;
                enabled: boolean;
                open: boolean;
                startTime: string | null;
                endTime: string | null;
              })[];
          };
        };
      };
    };
  };
  /**
   * Create a deal
   * @description **Required scopes:** `deals:write`
   */
  createDeal: {
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          name: string;
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            id: number;
            createdAt: string;
            updatedAt: string | null;
            deletedAt: string | null;
            name: string;
            teamId: number;
            siloId: number | null;
            enabled: boolean;
            open: boolean;
            startTime: string | null;
            endTime: string | null;
          };
        };
      };
    };
  };
  /**
   * Get a single deal
   * @description **Required scopes:** `deals:read`
   */
  getDeal: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            id: number;
            createdAt: string;
            updatedAt: string | null;
            deletedAt: string | null;
            name: string;
            teamId: number;
            siloId: number | null;
            enabled: boolean;
            open: boolean;
            startTime: string | null;
            endTime: string | null;
          };
        };
      };
    };
  };
  /**
   * Update a deal
   * @description **Required scopes:** `deals:write`
   */
  updateDeal: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          name?: string;
          open?: boolean;
          enabled?: boolean;
          startTime?: string | null;
          endTime?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            id: number;
            createdAt: string;
            updatedAt: string | null;
            deletedAt: string | null;
            name: string;
            teamId: number;
            siloId: number | null;
            enabled: boolean;
            open: boolean;
            startTime: string | null;
            endTime: string | null;
          };
        };
      };
    };
  };
  /**
   * Get all rules for a deal
   * @description **Required scopes:** `deals:read`
   */
  getRules: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            items: {
                id: number;
                dealId: number;
                chains: number[];
                contracts: string[];
                exceptChains: number[];
                exceptContracts: string[];
                createdAt: string;
                updatedAt: string;
              }[];
          };
        };
      };
    };
  };
  /**
   * Create a rule for a deal
   * @description **Required scopes:** `deals:write`
   */
  createRule: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          chains?: number[];
          contracts?: string[];
          exceptChains?: number[];
          exceptContracts?: string[];
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            id: number;
            dealId: number;
            chains: number[];
            contracts: string[];
            exceptChains: number[];
            exceptContracts: string[];
            createdAt: string;
            updatedAt: string;
          };
        };
      };
    };
  };
  /**
   * Update a rule for a deal
   * @description **Required scopes:** `deals:write`
   */
  updateRule: {
    parameters: {
      path: {
        id: number;
        rule_id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          chains: number[] | null;
          contracts: string[] | null;
          exceptChains: number[] | null;
          exceptContracts: string[] | null;
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            id: number;
            dealId: number;
            chains: number[];
            contracts: string[];
            exceptChains: number[];
            exceptContracts: string[];
            createdAt: string;
            updatedAt: string;
          };
        };
      };
    };
  };
  /**
   * Get all silos
   * @description **Required scopes:** `silos:read`
   */
  getSilos: {
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            items: ({
                id: number;
                createdAt: string;
                updatedAt: string;
                chainId: number;
                engineAccount: string;
                engineVersion: string;
                genesis: string;
                name: string;
                network: string;
                rpcUrl: string;
                nativeToken: {
                  symbol: string;
                  name: string | null;
                  decimals: number | null;
                };
              })[];
          };
        };
      };
    };
  };
  /**
   * Get a single silo
   * @description **Required scopes:** `silos:read`
   */
  getSilo: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            id: number;
            createdAt: string;
            updatedAt: string;
            chainId: number;
            engineAccount: string;
            engineVersion: string;
            genesis: string;
            name: string;
            network: string;
            rpcUrl: string;
            nativeToken: {
              symbol: string;
              name: string | null;
              decimals: number | null;
            };
          };
        };
      };
    };
  };
  /**
   * Get the bridged tokens associated with a silo
   * @description **Required scopes:** `silos:read`
   */
  getSiloBridgedTokens: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            total: number;
            items: ({
                id: number;
                createdAt: string;
                name: string;
                symbol: string;
                decimals: number;
                aurora_address: string | null;
                near_address: string | null;
                ethereum_address: string | null;
                iconUrl: string | null;
                isDeploymentPending: boolean;
              })[];
          };
        };
      };
    };
  };
  /**
   * Get the bridged tokens requested for a silo
   * @description **Required scopes:** `silos:read`
   */
  getSiloBridgedTokenRequests: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            total: number;
            items: ({
                id: number;
                createdAt: string;
                symbol: string;
                address: string | null;
              })[];
          };
        };
      };
    };
  };
  /**
   * Request bridging of a token for a silo
   * @description **Required scopes:** `silos:write`
   */
  bridgeSiloToken: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          tokenId?: number;
          symbol?: string;
          address?: string;
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            isDeploymentPending: boolean;
          };
        };
      };
    };
  };
  /**
   * Get the oracle configuration for a silo
   * @description **Required scopes:** `silos:read`
   */
  getSiloOracle: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            createdAt: string | null;
            updatedAt: string | null;
            address: string | null;
          };
        };
      };
    };
  };
  /**
   * Create an oracle configuration for a silo
   * @description **Required scopes:** `silos:write`
   */
  createSiloOracle: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            createdAt: string | null;
            updatedAt: string | null;
            address: string | null;
          };
        };
      };
    };
  };
  /**
   * Get the widget configuration for a silo
   * @description **Required scopes:** `silos:read`
   */
  getWidget: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            enabled: boolean;
            createdAt: string | null;
            updatedAt: string | null;
            fromNetworks: (("AURORA" | "ETHEREUM" | "NEAR" | "CUSTOM")[]) | null;
            toNetworks: (("AURORA" | "ETHEREUM" | "NEAR" | "CUSTOM")[]) | null;
            tokens: number[];
            widgetUrl: string | null;
          };
        };
      };
    };
  };
  /**
   * Update the widget configuration for a silo
   * @description **Required scopes:** `silos:write`
   */
  updateWidget: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          fromNetworks?: ("AURORA" | "ETHEREUM" | "NEAR" | "CUSTOM")[];
          toNetworks?: ("AURORA" | "ETHEREUM" | "NEAR" | "CUSTOM")[];
          tokens?: number[];
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            enabled: boolean;
            createdAt: string | null;
            updatedAt: string | null;
            fromNetworks: (("AURORA" | "ETHEREUM" | "NEAR" | "CUSTOM")[]) | null;
            toNetworks: (("AURORA" | "ETHEREUM" | "NEAR" | "CUSTOM")[]) | null;
            tokens: number[];
            widgetUrl: string | null;
          };
        };
      };
    };
  };
  /**
   * Get details of the wallets that have interacted with your silo
   * @description **Required scopes:** `transactions:read`
   */
  getWallets: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
        dealId?: number;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            total: number;
            items: {
                walletAddress: string;
                numberOfTransactions: number;
                firstTransactionAt: string;
                lastTransactionAt: string;
              }[];
          };
        };
      };
    };
  };
  /**
   * Get details of a single wallet that has interacted with your silo
   * @description **Required scopes:** `transactions:read`
   */
  getWallet: {
    parameters: {
      query?: {
        dealId?: number;
      };
      path: {
        id: string;
        address: string;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            walletAddress: string;
            numberOfTransactions: number;
            firstTransactionAt: string;
            lastTransactionAt: string;
          };
        };
      };
    };
  };
  /**
   * Upload an asset used in configuring the silo
   * @description **Required scopes:** `assets:write`
   */
  uploadSiloAsset: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** @enum {string} */
          type?: "network_logo" | "network_logo_dark" | "favicon";
          /** Format: binary */
          file?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            url: string;
          };
        };
      };
    };
  };
  /**
   * Get transaction chart data for a silo
   * @description **Required scopes:** `transactions:read`
   */
  getSiloTransactions: {
    parameters: {
      query?: {
        interval?: "1 WEEK" | "1 MONTH" | "3 MONTH";
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            items: {
                siloId: number;
                data: {
                  label: string;
                  transactionsCount: number;
                  walletsCount: number;
                  transactionsPerDay: {
                      day: string;
                      count: number;
                    }[];
                  walletsPerDay: {
                      day: string;
                      count: number;
                    }[];
                };
              }[];
          };
        };
      };
    };
  };
  /**
   * Enable disable whitelists to allow make transactions or deploy contracts publicly
   * @description **Required scopes:** `silo:write`
   */
  toggleSiloPermissions: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          isEnabled: boolean;
          /** @enum {string} */
          action: "MAKE_TRANSACTION" | "DEPLOY_CONTRACT";
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            /** @enum {string} */
            status: "PENDING" | "SUCCESSFUL";
            isEnabled: boolean;
            /** @enum {string} */
            action: "MAKE_TRANSACTION" | "DEPLOY_CONTRACT";
          };
        };
      };
    };
  };
  /**
   * Add wallet address to whitelist to allow make transactions or deploy contracts
   * @description **Required scopes:** `silo:write`
   */
  addAddressToPermissionsWhitelist: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          address: string;
          /** @enum {string} */
          action: "MAKE_TRANSACTION" | "DEPLOY_CONTRACT";
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            /** @enum {string} */
            status: "PENDING" | "SUCCESSFUL";
            address: string;
            /** @enum {string} */
            action: "MAKE_TRANSACTION" | "DEPLOY_CONTRACT";
          };
        };
      };
    };
  };
  /**
   * Remove wallet address from whitelist to forbid make transactions or deploy contracts
   * @description **Required scopes:** `silo:write`
   */
  removeAddressFromPermissionsWhitelist: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          address: string;
          /** @enum {string} */
          action: "MAKE_TRANSACTION" | "DEPLOY_CONTRACT";
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            /** @enum {string} */
            status: "PENDING" | "SUCCESSFUL";
            address: string;
            /** @enum {string} */
            action: "MAKE_TRANSACTION" | "DEPLOY_CONTRACT";
          };
        };
      };
    };
  };
  /**
   * Get collected gas over time for a single silo
   * @description **Required scopes:** `transactions:read`
   */
  getSiloCollectedGas: {
    parameters: {
      query: {
        startDate: string;
        endDate: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            count: number;
            transactionsCount: number;
            items: {
                day: string;
                count: number;
                transactionsCount: number;
              }[];
          };
        };
      };
    };
  };
  /**
   * Get collected gas to the moment
   * @description **Required scopes:** `transactions:read`
   */
  getSiloCollectedGasTotal: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            count: number;
          };
        };
      };
    };
  };
  /**
   * Get the failure rate chart for a single silo
   * @description **Required scopes:** `silos:read`
   */
  getSiloFailureRate: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            items: {
                label: string;
                chart: {
                    day: number;
                    count: number;
                  }[];
              }[];
          };
        };
      };
    };
  };
  /**
   * Get latency chart data
   * @description **Required scopes:** `silos:read`
   */
  getSiloLatency: {
    parameters: {
      query?: {
        interval?: "now-24h" | "now-12h" | "now-1h" | "now-15m";
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            items: {
                label: string;
                chart: {
                    day: number;
                    count: number;
                  }[];
              }[];
          };
        };
      };
    };
  };
  /**
   * Get RPC request chart data
   * @description **Required scopes:** `silos:read`
   */
  getSiloRpcRequests: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            items: {
                label: string;
                chart: {
                    day: number;
                    count: number;
                  }[];
              }[];
          };
        };
      };
    };
  };
  /**
   * Get the forwarder address for given target address
   * @description **Required scopes:** `forwarder:read`
   */
  getForwarderAddress: {
    parameters: {
      path: {
        id: number;
        targetAddress: string;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            forwarderAddress: string;
          };
        };
      };
    };
  };
  /**
   * Create a forwarder address for given target address
   * @description **Required scopes:** `forwarder:write`
   */
  createForwarderAddress: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          targetAddress: string;
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            forwarderAddress: string | null;
          };
        };
      };
    };
  };
  /**
   * Get the tokens supported by the forwarder
   * @description **Required scopes:** `forwarder:read`
   */
  getForwarderTokens: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            items: ({
                /** @enum {string} */
                symbol: "NEAR" | "wNEAR" | "USDt" | "USDC" | "AURORA";
                decimals: number;
                contractDeployed: boolean;
                enabled: boolean;
              })[];
          };
        };
      };
    };
  };
  /**
   * Update forwarder support for the given token(s)
   * @description **Required scopes:** `forwarder:write`
   */
  updateForwarderTokens: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          tokens: ("NEAR" | "wNEAR" | "USDt" | "USDC" | "AURORA")[];
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            status: string;
          };
        };
      };
    };
  };
  /**
   * Add forwarder support for the given token(s)
   * @description **Required scopes:** `forwarder:write`
   */
  addForwarderTokens: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          tokens: ("NEAR" | "wNEAR" | "USDt" | "USDC" | "AURORA")[];
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            status: string;
          };
        };
      };
    };
  };
  /**
   * Remove forwarder support for the given token(s)
   * @description **Required scopes:** `forwarder:write`
   */
  removeForwarderTokens: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description Body */
    requestBody?: {
      content: {
        "application/json": {
          tokens: ("NEAR" | "wNEAR" | "USDt" | "USDC" | "AURORA")[];
        };
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            status: string;
          };
        };
      };
    };
  };
  /**
   * Perform various checks on the silo and report the status
   * @description **Required scopes:** `silos:read`
   */
  healthcheck: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description 200 */
      200: {
        content: {
          "application/json": {
            /** @enum {string} */
            networkStatus: "ok" | "invalid-network" | "stalled";
            defaultTokensDeployed: {
              NEAR: boolean;
              USDt: boolean;
              USDC: boolean;
              AURORA: boolean;
            };
            bridgedTokensDeployed: {
              [key: string]: unknown;
            } | null;
          };
        };
      };
    };
  };
}
